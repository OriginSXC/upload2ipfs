name: IPFS Gateway Remote Probe (multi-region) + Patch index.html

on:
  workflow_dispatch:
    inputs:
      nodes:
        description: "Check-Host nodes per URL (3-7 recommended)"
        required: false
        default: "5"
      cid:
        description: "IPFS CID to test (only for probing; index.html 不改CID)"
        required: false
        default: "QmesMDnH9dy3Unxj9Du7S6bvG197XcGSrBwLPeKt7fkDSR"
  push:
    branches: [ master ]   # 你的仓库默认分支是 master；若是 main 就改成 main
    paths:
      - 'index.html'
      - 'gateways.js'
      - 'gateways.txt'
      - '.github/workflows/ipfs-gateway-remote-probe.yml'
  schedule:
    - cron: "23 2 * * *"
    
permissions:
  contents: write

concurrency:
  group: ipfs-gateway-remote-probe
  cancel-in-progress: false

jobs:
  probe:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install requests

      - name: Write remote_probe_checkhost.py  # ← 这里的 DEFAULT_CID 已换成你的
        shell: bash
        run: |
          cat > remote_probe_checkhost.py <<'PY'
          #!/usr/bin/env python3
          # -*- coding: utf-8 -*-
          import argparse, csv, re, time, requests
          CHECK_HTTP = "https://check-host.net/check-http"
          CHECK_RESULT = "https://check-host.net/check-result/{rid}"
          # 使用你的CID作为默认探测CID（可被 workflow_dispatch 输入覆盖）
          DEFAULT_CID = "QmesMDnH9dy3Unxj9Du7S6bvG197XcGSrBwLPeKt7fkDSR"

          def parse_urls(path: str):
            text = open(path, "r", encoding="utf-8", errors="ignore").read()
            urls = re.findall(r'https?://[^"\s]+', text)
            clean, seen = [], set()
            for u in urls:
              u = u.strip().rstrip(",")
              if u and u not in seen and (u.startswith("http://") or u.startswith("https://")):
                seen.add(u); clean.append(u)
            if not clean: raise RuntimeError("No http(s) URLs found in input file.")
            return clean

          def build_test_url(base: str, cid: str):
            return ("POST", f"{base}{cid}") if "/api/v0/cat" in base else ("GET", f"{base}{cid}")

          def start_check(url: str, max_nodes: int) -> dict:
            r = requests.get(CHECK_HTTP, params={"host": url, "max_nodes": max_nodes},
                             headers={"Accept": "application/json"}, timeout=15)
            r.raise_for_status()
            return r.json()

          def poll_result(request_id: str, timeout_s: float = 25.0, interval_s: float = 0.8) -> dict:
            t0 = time.time()
            while True:
              r = requests.get(CHECK_RESULT.format(rid=request_id),
                               headers={"Accept": "application/json"}, timeout=15)
              r.raise_for_status()
              data = r.json()
              if data and all(v is not None for v in data.values()):
                return data
              if time.time() - t0 > timeout_s:
                return data or {}
              time.sleep(interval_s)

          def summarize(node_results: dict):
            total = ready = ok_nodes = 0
            codes, fastest = [], None
            for _, arr in node_results.items():
              total += 1
              if arr is None or not arr: continue
              ready += 1
              entry = arr[0]
              try: success = int(entry[0])
              except: success = 0
              try: t = float(entry[1]) if entry[1] is not None else None
              except: t = None
              code = str(entry[3]) if len(entry) > 3 and entry[3] is not None else ""
              if code: codes.append(code)
              if code or success == 1:
                ok_nodes += 1
                if t is not None: fastest = t if fastest is None else min(fastest, t)
            return {
              "nodes_total": total,
              "nodes_ready": ready,
              "nodes_ok": ok_nodes,
              "codes": "|".join(sorted(set(codes))),
              "fastest_s": "" if fastest is None else f"{fastest:.3f}",
              "exists": 1 if ok_nodes > 0 else 0,
            }

          def main():
            ap = argparse.ArgumentParser()
            ap.add_argument("input")
            ap.add_argument("--cid", default=DEFAULT_CID)
            ap.add_argument("--nodes", type=int, default=5)
            ap.add_argument("--csv", default="reports/results_checkhost.csv")
            ap.add_argument("--sleep", type=float, default=0.6)
            args = ap.parse_args()

            urls = parse_urls(args.input)
            print(f"Found {len(urls)} URLs; probing with {args.nodes} nodes each...")
            with open(args.csv, "w", newline="", encoding="utf-8") as f:
              w = csv.writer(f)
              w.writerow(["base","method","test_url","exists","nodes_total","nodes_ready","nodes_ok","codes","fastest_s","permanent_link","request_id"])
              for base in urls:
                method, test_url = build_test_url(base, args.cid)
                try:
                  kickoff = start_check(test_url, args.nodes)
                  rid = kickoff.get("request_id", ""); perm = kickoff.get("permanent_link", "")
                  node_results = poll_result(rid)
                  summary = summarize(node_results)
                  w.writerow([base, method, test_url, summary["exists"], summary["nodes_total"], summary["nodes_ready"], summary["nodes_ok"], summary["codes"], summary["fastest_s"], perm, rid])
                  print(f"[{'ONLINE' if summary['exists'] else 'OFFLINE'}] {base} ok={summary['nodes_ok']}/{summary['nodes_total']} codes={summary['codes']}")
                except Exception as e:
                  w.writerow([base, method, test_url, 0, "", "", "", "", "", "", ""])
                  print(f"[ERROR] {base} -> {e}")
                time.sleep(args.sleep)
            print(f"Done. CSV saved to: {args.csv}")

          if __name__ == "__main__":
            main()
          PY
          chmod +x remote_probe_checkhost.py

      - name: Ensure gateways.js (use repo file if present; otherwise create default)
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f gateways.js || -f gateways.txt ]]; then
            echo "Using existing gateways.js/txt in repo."
          else
            echo "Creating gateways.js with embedded list."
            cat > gateways.js <<'JS'
            const downloadGateways = [
                "https://4everland.io/ipfs/", "https://alexdav.id/ipfs/", "https://api.thegraph.com/ipfs/api/v0/cat?arg=", "https://api.universalprofile.cloud/ipfs/", "https://aragon.ventures/ipfs/", "https://astyanax.io/ipfs/", "https://c4rex.co/ipfs/", "https://cdn.cwinfo.net/ipfs/", "https://cdn.ipfsscan.io/ipfs/", "https://cloudflare-ipfs.com/ipfs/", "https://crustwebsites.net/ipfs/", "https://cthd.icu/ipfs/", "https://dlunar.net/ipfs/", "https://dweb.eu.org/ipfs/", "https://dweb.link/ipfs/", "https://fleek.cool/ipfs/", "https://flk-ipfs.xyz/ipfs/", "https://gateway.ipfs.io/ipfs/", "https://gateway.lighthouse.storage/ipfs/", "https://gateway.originprotocol.com/ipfs/", "https://gateway.pinata.cloud/ipfs/", "https://gateway.serph.network/ipfs/", "https://gravity.jup.io/ipfs/", "https://gw-seattle.crustcloud.io/ipfs/", "https://gw.crustapps.net/ipfs/", "https://gw.ipfs-lens.dev/ipfs/", "https://hardbin.com/ipfs/", "https://hashnews.k1ic.com/ipfs/", "https://hub.textile.io/ipfs/", "https://infura-ipfs.io/ipfs/", "https://ipfs.1-2.dev/ipfs/", "https://ipfs.alloyxuast.tk/ipfs/", "https://ipfs.algonode.dev/ipfs/", "https://ipfs.algonode.xyz/ipfs/", "https://ipfs.anonymize.com/ipfs/", "https://ipfs.arching-kaos.com/ipfs/", "https://ipfs.best-practice.se/ipfs/", "https://ipfs.busy.org/ipfs/", "https://ipfs.chisdealhd.co.uk/ipfs/", "https://ipfs.cyou/ipfs/", "https://ipfs.decentralized-content.com/ipfs/", "https://ipfs.decoo.io/ipfs/", "https://ipfs.denarius.io/ipfs/", "https://ipfs.dlux.io/ipfs/", "https://ipfs.drink.cafe/ipfs/", "https://ipfs.eth.aragon.network/ipfs/", "https://ipfs.filebase.io/ipfs/", "https://ipfs.fleek.co/ipfs/", "https://ipfs.flock.io/ipfs/", "https://ipfs.fooock.com/ipfs/", "https://ipfs.funnychain.co/ipfs/", "https://ipfs.genenetwork.org/ipfs/", "https://ipfs.gitcoin.co/api/v0/cat?arg=", "https://ipfs-2.gitcoin.co/api/v0/cat?arg=", "https://ipfs-3.gitcoin.co/api/v0/cat?arg=", "https://ipfs-gateway.cloud/ipfs/", "https://ipfs-gateway.omniflix.studio/ipfs/", "https://ipfs.greyh.at/ipfs/", "https://ipfs.ink/ipfs/", "https://ipfs.io/ipfs/", "https://ipfs.jbb.one/ipfs/", "https://ipfs.joaoleitao.org/ipfs/", "https://ipfs.kaleido.art/ipfs/", "https://ipfs.kavin.rocks/ipfs/", "https://ipfs.kinematiks.com/ipfs/", "https://ipfs.lain.la/ipfs/", "https://ipfs.litnet.work/ipfs/", "https://ipfs.mttk.net/ipfs/", "https://ipfs.namebase.io/ipfs/", "https://ipfs.network.thegraph.com/ipfs/api/v0/cat?arg=", "https://ipfs.omniflix.studio/ipfs/", "https://ipfs.oversas.org/ipfs/", "https://ipfs.overpi.com/ipfs/", "https://ipfs.questbook.app:8080/api/v0/cat?arg=", "https://ipfs.runfission.com/ipfs/", "https://ipfs.scalaproject.io/ipfs/", "https://ipfs.slang.cx/ipfs/", "https://ipfs.sloppyta.co/ipfs/", "https://ipfs.smartholdem.io/ipfs/", "https://ipfs.staging.cloudflare-ipfs.com/ipfs/", "https://ipfs.stardustxr.org/ipfs/", "https://ipfs.tayfundogdas.me/ipfs/", "https://ipfs.telos.miami/ipfs/", "https://ipfs.treejer.com/ipfs/", "https://ipfs.tribecap.co/ipfs/", "https://ipfs.trusti.id/ipfs/", "https://ipfs.tubby.cloud/ipfs/", "https://ipfs.uploads.nu/ipfs/", "https://ipfs.web3.party/ipfs/", "https://ipfs.xoqq.ch/ipfs/", "https://ipfs.yt/ipfs/", "https://ipfs0.sjc.cloudsigma.com/ipfs/", "https://ipfs1.pixura.io/ipfs/", "https://ipfsgateway.makersplace.com/ipfs/", "https://ipns.co/ipfs/", "https://jorropo.net/ipfs/", "https://konubinix.eu/ipfs/", "https://magic.decentralized-content.com/ipfs/", "https://natoboram.mynetgear.com/ipfs/", "https://nftstorage.link/ipfs/", "https://ninetailed.ninja/ipfs/", "https://permaweb.eu.org/ipfs/", "https://permaweb.io/ipfs/", "https://ravencoinipfs-gateway.com/ipfs/", "https://search.ipfsgate.com/ipfs/", "https://storry.tv/ipfs/", "https://storjipfs-gateway.com/ipfs/", "https://trustless-gateway.link/ipfs/", "https://tth-ipfs.com/ipfs/", "https://via0.com/ipfs/", "https://video.oneloveipfs.com/ipfs/", "https://w3s.link/ipfs/"
            ];
            JS

      # === Patch index.html: ONLY update downloadGateways; DO NOT change any CID ===
      - name: Patch index.html (downloadGateways only)
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f index.html ]]; then
            echo "index.html not found at repo root; skip patch."
            exit 0
          fi

          node -e '
            const fs = require("fs");
            let html = fs.readFileSync("index.html","utf8");

            // 从 gateways.js 或 gateways.txt 读取列表，拼成 JS 数组文本
            let gwList = null;
            if (fs.existsSync("gateways.js")) {
              const gw = fs.readFileSync("gateways.js","utf8");
              const m = gw.match(/downloadGateways\\s*=\\s*(\\[[\\s\\S]*?\\]);/);
              if (m) gwList = m[1];
            } else if (fs.existsSync("gateways.txt")) {
              const arr = fs.readFileSync("gateways.txt","utf8")
                .split(/\\r?\\n/).map(s=>s.trim()).filter(Boolean);
              gwList = "[\\n  " + arr.map(u=>JSON.stringify(u)).join(",\\n  ") + "\\n]";
            }

            if (gwList) {
              const re = /downloadGateways\\s*=\\s*\\[[\\s\\S]*?\\];/m;
              if (re.test(html)) {
                html = html.replace(re, `downloadGateways = ${gwList};`);
                console.log("downloadGateways replaced.");
              } else {
                console.warn("downloadGateways array not found in index.html; no replacement.");
              }
              fs.writeFileSync("index.html", html);
            } else {
              console.warn("No gateways list available to inject.");
            }
          '

      - name: Run probe (multi-region)
        id: runprobe
        shell: bash
        env:
          NODES: ${{ github.event.inputs.nodes }}
          CID: ${{ github.event.inputs.cid }}
        run: |
          set -euo pipefail
          LIST_FILE="gateways.js"
          [[ -f gateways.txt ]] && LIST_FILE="gateways.txt"

          mkdir -p reports
          EXTRA=""
          if [[ -n "${CID:-}" ]]; then EXTRA="--cid ${CID}"; fi
          python remote_probe_checkhost.py "$LIST_FILE" --nodes "${NODES:-5}" --csv reports/results_checkhost.csv $EXTRA

          TS=$(date -u +"%Y-%m-%dT%H-%M-%SZ")
          cp reports/results_checkhost.csv "reports/ipfs_gateways_${TS}.csv"
          cp reports/results_checkhost.csv "reports/latest_ipfs_gateways.csv"

      - name: Commit changes (CSV + patched index.html)
        shell: bash
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add reports/*.csv || true
          git add index.html || true
          git add gateways.js || true
          git commit -m "Probe & patch: gateways list updated; probe CID=${{ github.event.inputs.cid }} @ $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "Nothing to commit"
          git push

      - name: Upload artifact (CSV)
        uses: actions/upload-artifact@v4
        with:
          name: ipfs-gateway-probe-${{ github.run_id }}
          path: reports/*.csv
